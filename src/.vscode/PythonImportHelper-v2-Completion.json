[
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.typings",
        "description": "domain.typings",
        "isExtraImport": true,
        "detail": "domain.typings",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "domain",
        "description": "domain",
        "isExtraImport": true,
        "detail": "domain",
        "documentation": {}
    },
    {
        "label": "interfaces",
        "importPath": "domain",
        "description": "domain",
        "isExtraImport": true,
        "detail": "domain",
        "documentation": {}
    },
    {
        "label": "interfaces",
        "importPath": "domain",
        "description": "domain",
        "isExtraImport": true,
        "detail": "domain",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "domain",
        "description": "domain",
        "isExtraImport": true,
        "detail": "domain",
        "documentation": {}
    },
    {
        "label": "interfaces",
        "importPath": "domain",
        "description": "domain",
        "isExtraImport": true,
        "detail": "domain",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "domain",
        "description": "domain",
        "isExtraImport": true,
        "detail": "domain",
        "documentation": {}
    },
    {
        "label": "interactors",
        "importPath": "domain",
        "description": "domain",
        "isExtraImport": true,
        "detail": "domain",
        "documentation": {}
    },
    {
        "label": "interactors",
        "importPath": "domain",
        "description": "domain",
        "isExtraImport": true,
        "detail": "domain",
        "documentation": {}
    },
    {
        "label": "UserEntity",
        "importPath": "domain.entities.user",
        "description": "domain.entities.user",
        "isExtraImport": true,
        "detail": "domain.entities.user",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UserEntity",
        "importPath": "domain.entities",
        "description": "domain.entities",
        "isExtraImport": true,
        "detail": "domain.entities",
        "documentation": {}
    },
    {
        "label": "UserEntity",
        "importPath": "domain.entities",
        "description": "domain.entities",
        "isExtraImport": true,
        "detail": "domain.entities",
        "documentation": {}
    },
    {
        "label": "UserEntity",
        "importPath": "domain.entities",
        "description": "domain.entities",
        "isExtraImport": true,
        "detail": "domain.entities",
        "documentation": {}
    },
    {
        "label": "UserEntity",
        "importPath": "domain.entities",
        "description": "domain.entities",
        "isExtraImport": true,
        "detail": "domain.entities",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm.decl_api",
        "description": "sqlalchemy.orm.decl_api",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.decl_api",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "domain.interfaces.repositories",
        "description": "domain.interfaces.repositories",
        "isExtraImport": true,
        "detail": "domain.interfaces.repositories",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistRepository",
        "importPath": "domain.interfaces.repositories",
        "description": "domain.interfaces.repositories",
        "isExtraImport": true,
        "detail": "domain.interfaces.repositories",
        "documentation": {}
    },
    {
        "label": "entity_to_model",
        "importPath": "infrastructure.alchemy.datamappers.user",
        "description": "infrastructure.alchemy.datamappers.user",
        "isExtraImport": true,
        "detail": "infrastructure.alchemy.datamappers.user",
        "documentation": {}
    },
    {
        "label": "model_to_entity",
        "importPath": "infrastructure.alchemy.datamappers.user",
        "description": "infrastructure.alchemy.datamappers.user",
        "isExtraImport": true,
        "detail": "infrastructure.alchemy.datamappers.user",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "infrastructure.alchemy.models",
        "description": "infrastructure.alchemy.models",
        "isExtraImport": true,
        "detail": "infrastructure.alchemy.models",
        "documentation": {}
    },
    {
        "label": "AlchemyRepository",
        "importPath": "infrastructure.gateways.repositories.alchemy",
        "description": "infrastructure.gateways.repositories.alchemy",
        "isExtraImport": true,
        "detail": "infrastructure.gateways.repositories.alchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "domain.interfaces",
        "description": "domain.interfaces",
        "isExtraImport": true,
        "detail": "domain.interfaces",
        "documentation": {}
    },
    {
        "label": "Encryptor",
        "importPath": "domain.interfaces",
        "description": "domain.interfaces",
        "isExtraImport": true,
        "detail": "domain.interfaces",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.interfaces",
        "description": "domain.interfaces",
        "isExtraImport": true,
        "detail": "domain.interfaces",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "VerificationError",
        "importPath": "argon2.exceptions",
        "description": "argon2.exceptions",
        "isExtraImport": true,
        "detail": "argon2.exceptions",
        "documentation": {}
    },
    {
        "label": "PyJWT",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "PyJWT",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt.exceptions",
        "description": "jwt.exceptions",
        "isExtraImport": true,
        "detail": "jwt.exceptions",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "get_authorization_scheme_param",
        "importPath": "fastapi.security.utils",
        "description": "fastapi.security.utils",
        "isExtraImport": true,
        "detail": "fastapi.security.utils",
        "documentation": {}
    },
    {
        "label": "FromDishka",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "Provider",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "Scope",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "from_context",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "provide",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "make_async_container",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "FromDishka",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "Provider",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "Scope",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "make_async_container",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "provide",
        "importPath": "dishka",
        "description": "dishka",
        "isExtraImport": true,
        "detail": "dishka",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "dishka.integrations.fastapi",
        "description": "dishka.integrations.fastapi",
        "isExtraImport": true,
        "detail": "dishka.integrations.fastapi",
        "documentation": {}
    },
    {
        "label": "setup_dishka",
        "importPath": "dishka.integrations.fastapi",
        "description": "dishka.integrations.fastapi",
        "isExtraImport": true,
        "detail": "dishka.integrations.fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "PostgresDsn",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "RedisDsn",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "APIKeyHeader",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "security",
        "importPath": "infrastructure",
        "description": "infrastructure",
        "isExtraImport": true,
        "detail": "infrastructure",
        "documentation": {}
    },
    {
        "label": "alchemy",
        "importPath": "infrastructure.gateways.repositories",
        "description": "infrastructure.gateways.repositories",
        "isExtraImport": true,
        "detail": "infrastructure.gateways.repositories",
        "documentation": {}
    },
    {
        "label": "redis",
        "importPath": "infrastructure.gateways.repositories",
        "description": "infrastructure.gateways.repositories",
        "isExtraImport": true,
        "detail": "infrastructure.gateways.repositories",
        "documentation": {}
    },
    {
        "label": "FastapiIdentityProviderImpl",
        "importPath": "infrastructure.idp",
        "description": "infrastructure.idp",
        "isExtraImport": true,
        "detail": "infrastructure.idp",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dependencies",
        "description": "dependencies",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "presentation.api",
        "description": "presentation.api",
        "isExtraImport": true,
        "detail": "presentation.api",
        "documentation": {}
    },
    {
        "label": "IEntity",
        "kind": 6,
        "importPath": "domain.entities.base",
        "description": "domain.entities.base",
        "peekOfCode": "class IEntity: ...",
        "detail": "domain.entities.base",
        "documentation": {}
    },
    {
        "label": "UserEntity",
        "kind": 6,
        "importPath": "domain.entities.user",
        "description": "domain.entities.user",
        "peekOfCode": "class UserEntity(IEntity):\n    username: Username\n    password: Password | HashedPassword",
        "detail": "domain.entities.user",
        "documentation": {}
    },
    {
        "label": "IError",
        "kind": 6,
        "importPath": "domain.errors.base",
        "description": "domain.errors.base",
        "peekOfCode": "class IError(Exception):\n    \"\"\"Base error for the application\"\"\"\n    pass",
        "detail": "domain.errors.base",
        "documentation": {}
    },
    {
        "label": "IUserError",
        "kind": 6,
        "importPath": "domain.errors.user",
        "description": "domain.errors.user",
        "peekOfCode": "class IUserError(IError):\n    \"\"\"Base error for user errors\"\"\"\n    pass\n@dataclass(frozen=True)\nclass UserAlreadyExistsError(IUserError):\n    \"\"\"Raised when trying to create a user that already exists\"\"\"\n    username: Username\n    @property\n    def message(self):\n        return f'User {self.username} already exists'",
        "detail": "domain.errors.user",
        "documentation": {}
    },
    {
        "label": "UserAlreadyExistsError",
        "kind": 6,
        "importPath": "domain.errors.user",
        "description": "domain.errors.user",
        "peekOfCode": "class UserAlreadyExistsError(IUserError):\n    \"\"\"Raised when trying to create a user that already exists\"\"\"\n    username: Username\n    @property\n    def message(self):\n        return f'User {self.username} already exists'\n@dataclass(frozen=True)\nclass InvalidCredentialsError(IUserError):\n    \"\"\"Raised when trying to log into a user account when credentials are incorrect\"\"\"\n    username: Username",
        "detail": "domain.errors.user",
        "documentation": {}
    },
    {
        "label": "InvalidCredentialsError",
        "kind": 6,
        "importPath": "domain.errors.user",
        "description": "domain.errors.user",
        "peekOfCode": "class InvalidCredentialsError(IUserError):\n    \"\"\"Raised when trying to log into a user account when credentials are incorrect\"\"\"\n    username: Username\n    @property\n    def message(self):\n        return f\"Login to {self.username}'s account failed\"\nclass UserNotAuthenticatedError(IUserError):\n    \"\"\"Raised when user is not authenticated\"\"\"\n    message = 'User is not authenticated'",
        "detail": "domain.errors.user",
        "documentation": {}
    },
    {
        "label": "UserNotAuthenticatedError",
        "kind": 6,
        "importPath": "domain.errors.user",
        "description": "domain.errors.user",
        "peekOfCode": "class UserNotAuthenticatedError(IUserError):\n    \"\"\"Raised when user is not authenticated\"\"\"\n    message = 'User is not authenticated'",
        "detail": "domain.errors.user",
        "documentation": {}
    },
    {
        "label": "BaseInteractor",
        "kind": 6,
        "importPath": "domain.interactors.base",
        "description": "domain.interactors.base",
        "peekOfCode": "class BaseInteractor: ...",
        "detail": "domain.interactors.base",
        "documentation": {}
    },
    {
        "label": "UserInteractor",
        "kind": 6,
        "importPath": "domain.interactors.user",
        "description": "domain.interactors.user",
        "peekOfCode": "class UserInteractor(BaseInteractor):\n    def __init__(\n        self,\n        *,\n        user_repo: interfaces.UserRepository,\n        encryptor: interfaces.Encryptor,\n        uow: interfaces.UnitOfWork,\n        idp: interfaces.IdentityProvider,\n    ):\n        self._encryptor = encryptor",
        "detail": "domain.interactors.user",
        "documentation": {}
    },
    {
        "label": "Repository",
        "kind": 6,
        "importPath": "domain.interfaces.repositories.base",
        "description": "domain.interfaces.repositories.base",
        "peekOfCode": "class Repository(abc.ABC): ...",
        "detail": "domain.interfaces.repositories.base",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistRepository",
        "kind": 6,
        "importPath": "domain.interfaces.repositories.blocked_token",
        "description": "domain.interfaces.repositories.blocked_token",
        "peekOfCode": "class TokenBlacklistRepository(Repository, abc.ABC):\n    async def revoke(self, token: Token, clean_up_after: timedelta): ...",
        "detail": "domain.interfaces.repositories.blocked_token",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "domain.interfaces.repositories.user",
        "description": "domain.interfaces.repositories.user",
        "peekOfCode": "class UserRepository(Repository, abc.ABC):\n    @abc.abstractmethod\n    async def create(self, entity: UserEntity):\n        raise NotImplementedError()\n    @abc.abstractmethod\n    async def get_by_username(self, username: Username) -> UserEntity | None:\n        raise NotImplementedError()",
        "detail": "domain.interfaces.repositories.user",
        "documentation": {}
    },
    {
        "label": "Encryptor",
        "kind": 6,
        "importPath": "domain.interfaces.security.encryptor",
        "description": "domain.interfaces.security.encryptor",
        "peekOfCode": "class Encryptor(ABC):\n    @abstractmethod\n    def encrypt(self, password: Password) -> Password:\n        pass\n    @abstractmethod\n    def check(self, hashed_password: HashedPassword, password: Password) -> bool:\n        pass",
        "detail": "domain.interfaces.security.encryptor",
        "documentation": {}
    },
    {
        "label": "TokenManager",
        "kind": 6,
        "importPath": "domain.interfaces.security.token_manager",
        "description": "domain.interfaces.security.token_manager",
        "peekOfCode": "class TokenManager(abc.ABC):\n    @abc.abstractmethod\n    def make_token(self, username: Username) -> tuple[Token, ExpiresAt]:\n        pass\n    @abc.abstractmethod\n    def read_username(self, t: Token) -> Username | None:\n        pass\n    @abc.abstractmethod\n    async def revoke(self, t: Token):\n        pass",
        "detail": "domain.interfaces.security.token_manager",
        "documentation": {}
    },
    {
        "label": "IdentityProvider",
        "kind": 6,
        "importPath": "domain.interfaces.idp",
        "description": "domain.interfaces.idp",
        "peekOfCode": "class IdentityProvider(abc.ABC):\n    \"\"\"\n    https://ru.wikipedia.org/wiki/Identity_Provider\n    \"\"\"\n    @abc.abstractmethod\n    def get_username(self) -> Username:\n        pass\n    @abc.abstractmethod\n    def authorize(self, username: Username):\n        pass",
        "detail": "domain.interfaces.idp",
        "documentation": {}
    },
    {
        "label": "UnitOfWork",
        "kind": 6,
        "importPath": "domain.interfaces.uow",
        "description": "domain.interfaces.uow",
        "peekOfCode": "class UnitOfWork(Protocol):\n    async def commit(self, *args, **kwargs) -> None:\n        pass\n    async def rollback(self, *args, **kwargs) -> None:\n        pass",
        "detail": "domain.interfaces.uow",
        "documentation": {}
    },
    {
        "label": "model_to_entity",
        "kind": 2,
        "importPath": "infrastructure.alchemy.datamappers.user",
        "description": "infrastructure.alchemy.datamappers.user",
        "peekOfCode": "def model_to_entity(model: UserModel) -> UserEntity:\n    return UserEntity(username=model.username, password=model.password)\ndef entity_to_model(entity: UserEntity) -> UserModel:\n    return UserModel(username=entity.username, password=entity.password)",
        "detail": "infrastructure.alchemy.datamappers.user",
        "documentation": {}
    },
    {
        "label": "entity_to_model",
        "kind": 2,
        "importPath": "infrastructure.alchemy.datamappers.user",
        "description": "infrastructure.alchemy.datamappers.user",
        "peekOfCode": "def entity_to_model(entity: UserEntity) -> UserModel:\n    return UserModel(username=entity.username, password=entity.password)",
        "detail": "infrastructure.alchemy.datamappers.user",
        "documentation": {}
    },
    {
        "label": "IModel",
        "kind": 6,
        "importPath": "infrastructure.alchemy.models.base",
        "description": "infrastructure.alchemy.models.base",
        "peekOfCode": "class IModel(DeclarativeBase): ...",
        "detail": "infrastructure.alchemy.models.base",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "infrastructure.alchemy.models.user",
        "description": "infrastructure.alchemy.models.user",
        "peekOfCode": "class UserModel(IModel):\n    username: M[str] = Column(String(length=32), primary_key=True)\n    password: M[str] = Column(String(length=128))\n    __tablename__ = 'users'",
        "detail": "infrastructure.alchemy.models.user",
        "documentation": {}
    },
    {
        "label": "AlchemyRepository",
        "kind": 6,
        "importPath": "infrastructure.gateways.repositories.alchemy.base",
        "description": "infrastructure.gateways.repositories.alchemy.base",
        "peekOfCode": "class AlchemyRepository:\n    def __init__(self, session: AsyncSession) -> None:\n        self._session = session",
        "detail": "infrastructure.gateways.repositories.alchemy.base",
        "documentation": {}
    },
    {
        "label": "UserAlchemyRepositoryImpl",
        "kind": 6,
        "importPath": "infrastructure.gateways.repositories.alchemy.user",
        "description": "infrastructure.gateways.repositories.alchemy.user",
        "peekOfCode": "class UserAlchemyRepositoryImpl(AlchemyRepository, UserRepository):\n    async def create(self, entity: UserEntity):\n        self._session.add(entity_to_model(entity))\n    async def get_by_username(self, username: str) -> UserEntity | None:\n        obj = await self._session.scalar(select(UserModel).where(UserModel.username == username))\n        if obj is None:\n            return None\n        return model_to_entity(obj)",
        "detail": "infrastructure.gateways.repositories.alchemy.user",
        "documentation": {}
    },
    {
        "label": "MemoryRepository",
        "kind": 6,
        "importPath": "infrastructure.gateways.repositories.memory.base",
        "description": "infrastructure.gateways.repositories.memory.base",
        "peekOfCode": "class MemoryRepository:\n    pass",
        "detail": "infrastructure.gateways.repositories.memory.base",
        "documentation": {}
    },
    {
        "label": "UserMemoryRepositoryImpl",
        "kind": 6,
        "importPath": "infrastructure.gateways.repositories.memory.user",
        "description": "infrastructure.gateways.repositories.memory.user",
        "peekOfCode": "class UserMemoryRepositoryImpl(MemoryRepository, UserRepository):\n    _entities: list[UserEntity] = []\n    async def create(self, entity: UserEntity):\n        self._entities.append(entity)\n    async def get_by_username(self, username: Username) -> UserEntity | None:\n        for entity in self._entities:\n            if entity.username == username:\n                return entity\n        return None",
        "detail": "infrastructure.gateways.repositories.memory.user",
        "documentation": {}
    },
    {
        "label": "RedisRepository",
        "kind": 6,
        "importPath": "infrastructure.gateways.repositories.redis.base",
        "description": "infrastructure.gateways.repositories.redis.base",
        "peekOfCode": "class RedisRepository:\n    def __init__(self, client: Redis) -> None:\n        self._client = client",
        "detail": "infrastructure.gateways.repositories.redis.base",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistRedisRepositoryImpl",
        "kind": 6,
        "importPath": "infrastructure.gateways.repositories.redis.token_blacklist",
        "description": "infrastructure.gateways.repositories.redis.token_blacklist",
        "peekOfCode": "class TokenBlacklistRedisRepositoryImpl(RedisRepository, TokenBlacklistRepository):\n    async def block(self, token: Token, until: timedelta):\n        async with self._client.pipeline() as p:\n            await p.set(token, '')\n            await p.expire(token, time=until.seconds)",
        "detail": "infrastructure.gateways.repositories.redis.token_blacklist",
        "documentation": {}
    },
    {
        "label": "EncryptorImpl",
        "kind": 6,
        "importPath": "infrastructure.security.encryptor",
        "description": "infrastructure.security.encryptor",
        "peekOfCode": "class EncryptorImpl(Encryptor):\n    def __init__(self, *, hasher: PasswordHasher, settings: Settings):\n        self.hasher = hasher\n        self.security = settings.security\n    def encrypt(self, password: Password) -> Password:\n        return self.hasher.hash(password, salt=self.security.secret.encode())\n    def check(self, hashed_password: HashedPassword, password: Password) -> bool:\n        try:\n            self.hasher.verify(hashed_password, password)\n        except VerificationError:",
        "detail": "infrastructure.security.encryptor",
        "documentation": {}
    },
    {
        "label": "TokenManagerImpl",
        "kind": 6,
        "importPath": "infrastructure.security.token_manager",
        "description": "infrastructure.security.token_manager",
        "peekOfCode": "class TokenManagerImpl(interfaces.TokenManager):\n    def __init__(self, *, jwt: PyJWT, blacklist: interfaces.TokenBlacklistRepository, settings: Settings):\n        self._jwt = jwt\n        self._blacklist = blacklist\n        self.security = settings.security\n    def make_token(self, username: Username) -> tuple[Token, ExpiresAt]:\n        expires_at = datetime.now(tz=timezone.utc) + self.security.expiration_time\n        payload = {'jti': username, 'exp': expires_at}\n        token = self._jwt.encode(payload, algorithm=self.security.algorithm, key=self.security.secret)\n        return (token, expires_at)",
        "detail": "infrastructure.security.token_manager",
        "documentation": {}
    },
    {
        "label": "FastapiIdentityProviderImpl",
        "kind": 6,
        "importPath": "infrastructure.idp",
        "description": "infrastructure.idp",
        "peekOfCode": "class FastapiIdentityProviderImpl(interfaces.IdentityProvider):\n    cookie_name = 'Authorization'\n    def __init__(self, *, req: Request, resp: Response, token_mgr: interfaces.TokenManager, settings: Settings):\n        self._req = req\n        self._resp = resp\n        self._token_mgr = token_mgr\n        self._settings = settings\n    def get_token(self) -> Token:\n        header_value = self._req.headers.get('Authorization')\n        scheme, param = get_authorization_scheme_param(header_value)",
        "detail": "infrastructure.idp",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "presentation.api.users.routes",
        "description": "presentation.api.users.routes",
        "peekOfCode": "router = APIRouter(prefix='/users')\n@router.post(\n    '/register',\n    description='Create a new user',\n    status_code=201,\n    responses={\n        201: {'model': schemas.LoginUserResponseSchema, 'description': 'Fine!'},\n        409: {'description': 'A user with this username already exist'},\n    },\n)",
        "detail": "presentation.api.users.routes",
        "documentation": {}
    },
    {
        "label": "RegisterUserRequestSchema",
        "kind": 6,
        "importPath": "presentation.api.users.schemas",
        "description": "presentation.api.users.schemas",
        "peekOfCode": "class RegisterUserRequestSchema(ISchema):\n    username: str = Field(\n        min_length=3,\n        max_length=32,\n        pattern=r'^[a-zA-Z0-9_]+$',\n        description=(\n            'Username must be between 3 and 32 characters long'\n            'and can only contain'\n            'letters, numbers, and underscores.'\n        ),",
        "detail": "presentation.api.users.schemas",
        "documentation": {}
    },
    {
        "label": "LoginUserRequestSchema",
        "kind": 6,
        "importPath": "presentation.api.users.schemas",
        "description": "presentation.api.users.schemas",
        "peekOfCode": "class LoginUserRequestSchema(ISchema):\n    username: str\n    password: str\nclass LoginUserResponseSchema(ISchema):\n    token: str\nclass CurrentUserResponseSchema(ISchema):\n    username: str",
        "detail": "presentation.api.users.schemas",
        "documentation": {}
    },
    {
        "label": "LoginUserResponseSchema",
        "kind": 6,
        "importPath": "presentation.api.users.schemas",
        "description": "presentation.api.users.schemas",
        "peekOfCode": "class LoginUserResponseSchema(ISchema):\n    token: str\nclass CurrentUserResponseSchema(ISchema):\n    username: str",
        "detail": "presentation.api.users.schemas",
        "documentation": {}
    },
    {
        "label": "CurrentUserResponseSchema",
        "kind": 6,
        "importPath": "presentation.api.users.schemas",
        "description": "presentation.api.users.schemas",
        "peekOfCode": "class CurrentUserResponseSchema(ISchema):\n    username: str",
        "detail": "presentation.api.users.schemas",
        "documentation": {}
    },
    {
        "label": "DependsToken",
        "kind": 5,
        "importPath": "presentation.api.depends_token",
        "description": "presentation.api.depends_token",
        "peekOfCode": "DependsToken = Depends(APIKeyHeader(name='Authorization'))",
        "detail": "presentation.api.depends_token",
        "documentation": {}
    },
    {
        "label": "Algorithm",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Algorithm(str, Enum):\n    HS256 = 'HS256'\n    HS384 = 'HS384'\n    HS512 = 'HS512'\nclass SecuritySettings(BaseSettings):\n    secret: str\n    algorithm: Algorithm = Algorithm.HS256\n    expiration_time: timedelta\nclass Settings(BaseSettings):\n    is_debug: bool = True",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SecuritySettings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class SecuritySettings(BaseSettings):\n    secret: str\n    algorithm: Algorithm = Algorithm.HS256\n    expiration_time: timedelta\nclass Settings(BaseSettings):\n    is_debug: bool = True\n    db: PostgresDsn\n    redis: RedisDsn\n    security: SecuritySettings\n    class Config:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Settings(BaseSettings):\n    is_debug: bool = True\n    db: PostgresDsn\n    redis: RedisDsn\n    security: SecuritySettings\n    class Config:\n        env_file = os.path.join(BASE_DIR, '.env')\n        env_file_encoding = 'utf-8'\n        env_nested_delimiter = '.'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nclass Algorithm(str, Enum):\n    HS256 = 'HS256'\n    HS384 = 'HS384'\n    HS512 = 'HS512'\nclass SecuritySettings(BaseSettings):\n    secret: str\n    algorithm: Algorithm = Algorithm.HS256\n    expiration_time: timedelta\nclass Settings(BaseSettings):",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SettingsProvider",
        "kind": 6,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "class SettingsProvider(Provider):\n    @provide(scope=Scope.APP)\n    async def get_settings(self) -> Settings:\n        return Settings()  # type: ignore\nclass AlchemyProvider(Provider):\n    @provide(scope=Scope.APP)\n    def get_engine(self, settings: Settings) -> AsyncEngine:\n        return create_async_engine(str(settings.db), echo=False, pool_recycle=180)\n    @provide(scope=Scope.APP)\n    def get_session_maker(self, engine: AsyncEngine) -> async_sessionmaker[AsyncSession]:",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "AlchemyProvider",
        "kind": 6,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "class AlchemyProvider(Provider):\n    @provide(scope=Scope.APP)\n    def get_engine(self, settings: Settings) -> AsyncEngine:\n        return create_async_engine(str(settings.db), echo=False, pool_recycle=180)\n    @provide(scope=Scope.APP)\n    def get_session_maker(self, engine: AsyncEngine) -> async_sessionmaker[AsyncSession]:\n        return async_sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)\n    @provide(scope=Scope.REQUEST)\n    async def get_session(self, factory: async_sessionmaker[AsyncSession]) -> AsyncIterable[AsyncSession]:\n        session = factory()",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "RedisProvider",
        "kind": 6,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "class RedisProvider(Provider):\n    scope = Scope.APP\n    @provide\n    def get_redis(self, settings: Settings) -> Redis:\n        return Redis.from_url(str(settings.redis))\nclass RepositoryProvider(Provider):\n    scope = Scope.REQUEST\n    @provide\n    def get_user_repository(self, session: AsyncSession) -> UserRepository:\n        return alchemy.UserAlchemyRepositoryImpl(session)",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "RepositoryProvider",
        "kind": 6,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "class RepositoryProvider(Provider):\n    scope = Scope.REQUEST\n    @provide\n    def get_user_repository(self, session: AsyncSession) -> UserRepository:\n        return alchemy.UserAlchemyRepositoryImpl(session)\n    @provide\n    def get_token_repository(self, r: Redis) -> TokenBlacklistRepository:\n        return redis.TokenBlacklistRedisRepositoryImpl(r)\nclass FastapiProvider(Provider):\n    request = from_context(Request, scope=Scope.REQUEST)",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "FastapiProvider",
        "kind": 6,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "class FastapiProvider(Provider):\n    request = from_context(Request, scope=Scope.REQUEST)\n    response = from_context(Response, scope=Scope.REQUEST)\n    @provide(scope=Scope.APP)\n    def get_jwt(self) -> PyJWT:\n        return PyJWT()\n    @provide(scope=Scope.REQUEST)\n    def get_token_manager(self, settings: Settings, jwt: PyJWT, blacklist: TokenBlacklistRepository) -> TokenManager:\n        return security.TokenManagerImpl(jwt=jwt, blacklist=blacklist, settings=settings)\n    @provide(scope=Scope.REQUEST)",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "SecurityProvider",
        "kind": 6,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "class SecurityProvider(Provider):\n    @provide(scope=Scope.APP)\n    def get_hasher(self) -> PasswordHasher:\n        return PasswordHasher()\n    @provide(scope=Scope.REQUEST)\n    def get_encryptor(self, settings: Settings, hasher: PasswordHasher) -> Encryptor:\n        return security.EncryptorImpl(settings=settings, hasher=hasher)\nclass InteractorProvider(Provider):\n    scope = Scope.REQUEST\n    @provide",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "InteractorProvider",
        "kind": 6,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "class InteractorProvider(Provider):\n    scope = Scope.REQUEST\n    @provide\n    def get_user_interactor(\n        self, user_repo: UserRepository, encryptor: Encryptor, uow: AsyncSession, idp: IdentityProvider\n    ) -> interactors.UserInteractor:\n        return interactors.UserInteractor(user_repo=user_repo, encryptor=encryptor, uow=uow, idp=idp)",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "setup_routers",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def setup_routers(app: FastAPI) -> FastAPI:\n    api_router = APIRouter(prefix='/api')\n    for router in routers:\n        api_router.include_router(router)\n    app.include_router(api_router)\n    return app\ndef get_app() -> FastAPI:\n    container = make_async_container(\n        deps.SettingsProvider(),\n        deps.AlchemyProvider(),",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_app",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_app() -> FastAPI:\n    container = make_async_container(\n        deps.SettingsProvider(),\n        deps.AlchemyProvider(),\n        deps.RedisProvider(),\n        deps.RepositoryProvider(),\n        deps.FastapiProvider(),\n        deps.SecurityProvider(),\n        deps.InteractorProvider(),\n    )",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Penis",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class Penis:\n    def __init__(self, r: Response):\n        self._r = r\n    def get_body(self) -> bytes:\n        return self._r.body\nclass PenisProvider(Provider):\n    scope = Scope.REQUEST\n    @provide\n    def get_penis(self, r: Response) -> Penis:\n        return Penis(r)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "PenisProvider",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class PenisProvider(Provider):\n    scope = Scope.REQUEST\n    @provide\n    def get_penis(self, r: Response) -> Penis:\n        return Penis(r)\ncontainer = make_async_container(PenisProvider())\napp = FastAPI(title='RIX', description='RIX API', docs_url='/api/docs', version='dev')\nsetup_dishka(app)\n@app.post('/r')\nasync def m(r: FromDishka[Response]):",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "container",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "container = make_async_container(PenisProvider())\napp = FastAPI(title='RIX', description='RIX API', docs_url='/api/docs', version='dev')\nsetup_dishka(app)\n@app.post('/r')\nasync def m(r: FromDishka[Response]):\n    print(r.set_cookie('d', '1'))",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "app = FastAPI(title='RIX', description='RIX API', docs_url='/api/docs', version='dev')\nsetup_dishka(app)\n@app.post('/r')\nasync def m(r: FromDishka[Response]):\n    print(r.set_cookie('d', '1'))",
        "detail": "test",
        "documentation": {}
    }
]